// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package merkle_gaurd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MerkleTreeClient is the client API for MerkleTree service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerkleTreeClient interface {
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	GetMerkleProof(ctx context.Context, in *MerkleProofRequest, opts ...grpc.CallOption) (*MerkleProofResponse, error)
	VerifyMerkleProof(ctx context.Context, in *VerifyProofRequest, opts ...grpc.CallOption) (*VerifyProofResponse, error)
}

type merkleTreeClient struct {
	cc grpc.ClientConnInterface
}

func NewMerkleTreeClient(cc grpc.ClientConnInterface) MerkleTreeClient {
	return &merkleTreeClient{cc}
}

func (c *merkleTreeClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/merkle_gaurd.MerkleTree/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleTreeClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, "/merkle_gaurd.MerkleTree/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleTreeClient) GetMerkleProof(ctx context.Context, in *MerkleProofRequest, opts ...grpc.CallOption) (*MerkleProofResponse, error) {
	out := new(MerkleProofResponse)
	err := c.cc.Invoke(ctx, "/merkle_gaurd.MerkleTree/GetMerkleProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleTreeClient) VerifyMerkleProof(ctx context.Context, in *VerifyProofRequest, opts ...grpc.CallOption) (*VerifyProofResponse, error) {
	out := new(VerifyProofResponse)
	err := c.cc.Invoke(ctx, "/merkle_gaurd.MerkleTree/VerifyMerkleProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerkleTreeServer is the server API for MerkleTree service.
// All implementations must embed UnimplementedMerkleTreeServer
// for forward compatibility
type MerkleTreeServer interface {
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	GetMerkleProof(context.Context, *MerkleProofRequest) (*MerkleProofResponse, error)
	VerifyMerkleProof(context.Context, *VerifyProofRequest) (*VerifyProofResponse, error)
	mustEmbedUnimplementedMerkleTreeServer()
}

// UnimplementedMerkleTreeServer must be embedded to have forward compatible implementations.
type UnimplementedMerkleTreeServer struct {
}

func (UnimplementedMerkleTreeServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedMerkleTreeServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedMerkleTreeServer) GetMerkleProof(context.Context, *MerkleProofRequest) (*MerkleProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerkleProof not implemented")
}
func (UnimplementedMerkleTreeServer) VerifyMerkleProof(context.Context, *VerifyProofRequest) (*VerifyProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMerkleProof not implemented")
}
func (UnimplementedMerkleTreeServer) mustEmbedUnimplementedMerkleTreeServer() {}

// UnsafeMerkleTreeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerkleTreeServer will
// result in compilation errors.
type UnsafeMerkleTreeServer interface {
	mustEmbedUnimplementedMerkleTreeServer()
}

func RegisterMerkleTreeServer(s *grpc.Server, srv MerkleTreeServer) {
	s.RegisterService(&_MerkleTree_serviceDesc, srv)
}

func _MerkleTree_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleTreeServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merkle_gaurd.MerkleTree/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleTreeServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleTree_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleTreeServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merkle_gaurd.MerkleTree/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleTreeServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleTree_GetMerkleProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerkleProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleTreeServer).GetMerkleProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merkle_gaurd.MerkleTree/GetMerkleProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleTreeServer).GetMerkleProof(ctx, req.(*MerkleProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleTree_VerifyMerkleProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleTreeServer).VerifyMerkleProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merkle_gaurd.MerkleTree/VerifyMerkleProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleTreeServer).VerifyMerkleProof(ctx, req.(*VerifyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MerkleTree_serviceDesc = grpc.ServiceDesc{
	ServiceName: "merkle_gaurd.MerkleTree",
	HandlerType: (*MerkleTreeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _MerkleTree_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _MerkleTree_Download_Handler,
		},
		{
			MethodName: "GetMerkleProof",
			Handler:    _MerkleTree_GetMerkleProof_Handler,
		},
		{
			MethodName: "VerifyMerkleProof",
			Handler:    _MerkleTree_VerifyMerkleProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/proto/merkle-gaurd.proto",
}
